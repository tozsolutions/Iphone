name: CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  SCHEME: iPhone
  CONFIGURATION: Release
  
jobs:
  test:
    name: Test
    runs-on: macos-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Cache Swift Package Manager
      uses: actions/cache@v3
      with:
        path: .build
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-
          
    - name: Install SwiftLint
      run: brew install swiftlint
      
    - name: Run SwiftLint
      run: swiftlint lint --reporter github-actions-logging
      
    - name: Build
      run: swift build -v
      
    - name: Run tests
      run: swift test --enable-code-coverage
      
    - name: Generate code coverage
      run: |
        xcrun llvm-cov export -format="lcov" \
          .build/debug/iPhonePackageTests.xctest/Contents/MacOS/iPhonePackageTests \
          -instr-profile .build/debug/codecov/default.profdata > coverage.lcov
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: coverage.lcov
        fail_ci_if_error: true

  build-ios:
    name: Build iOS
    runs-on: macos-latest
    needs: test
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Build for iOS Simulator
      run: |
        if [ -f "iPhone.xcodeproj/project.pbxproj" ]; then
          xcodebuild build \
            -scheme $SCHEME \
            -configuration $CONFIGURATION \
            -destination 'platform=iOS Simulator,name=iPhone 15,OS=latest' \
            CODE_SIGNING_ALLOWED=NO
        else
          echo "Xcode project not found, using Swift Package Manager"
          swift build -c release
        fi

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  release:
    name: Release
    runs-on: macos-latest
    needs: [test, build-ios, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Build Release
      run: |
        ./Scripts/build.sh release
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          build/release/*
        generate_release_notes: true